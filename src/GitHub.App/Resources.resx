<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BrowseForDirectory" xml:space="preserve">
    <value>Select a containing folder for your new repository.</value>
  </data>
  <data name="CloneTitle" xml:space="preserve">
    <value>Clone a {0} Repository</value>
  </data>
  <data name="CouldNotConnectToGitHub" xml:space="preserve">
    <value>Could not connect to github.com</value>
  </data>
  <data name="CreateGistTitle" xml:space="preserve">
    <value>Create a GitHub Gist</value>
  </data>
  <data name="CreateTitle" xml:space="preserve">
    <value>Create a {0} Repository</value>
  </data>
  <data name="DefaultGistFileName" xml:space="preserve">
    <value>GistFromVisualStudio.cs</value>
  </data>
  <data name="EnterpriseUrlValidatorEmpty" xml:space="preserve">
    <value>Please enter an Enterprise URL</value>
  </data>
  <data name="EnterpriseUrlValidatorInvalid" xml:space="preserve">
    <value>Please enter a valid Enterprise URL</value>
  </data>
  <data name="EnterpriseUrlValidatorNotAGitHubHost" xml:space="preserve">
    <value>Not an Enterprise server. Please enter an Enterprise URL</value>
  </data>
  <data name="ForgotPasswordLink" xml:space="preserve">
    <value>(forgot your password?)</value>
  </data>
  <data name="LoginFailedForbiddenMessage" xml:space="preserve">
    <value>Make sure to use your password and not a Personal Access token to log in.</value>
  </data>
  <data name="LoginFailedMessage" xml:space="preserve">
    <value>Check your username and password, then try again</value>
  </data>
  <data name="LoginFailedText" xml:space="preserve">
    <value>Login failed.</value>
  </data>
  <data name="LoginTitle" xml:space="preserve">
    <value>Connect To GitHub</value>
  </data>
  <data name="LogoutRequiredFeatureGist" xml:space="preserve">
    <value>create a Gist</value>
  </data>
  <data name="LogoutRequiredMessage" xml:space="preserve">
    <value>To {0} you need to sign out and back in.</value>
  </data>
  <data name="LogoutRequiredTitle" xml:space="preserve">
    <value>Sign Out Required</value>
  </data>
  <data name="PasswordValidatorEmpty" xml:space="preserve">
    <value>Please enter your password</value>
  </data>
  <data name="PublishTitle" xml:space="preserve">
    <value>Publish repository</value>
  </data>
  <data name="PublishToTitle" xml:space="preserve">
    <value>Publish repository to {0}</value>
  </data>
  <data name="RepositoryCloneFailedNoSelectedRepo" xml:space="preserve">
    <value>No selected repository.</value>
  </data>
  <data name="RepositoryCreationFailedAlreadyExists" xml:space="preserve">
    <value>Repository '{0}/{1}' already exists.</value>
  </data>
  <data name="RepositoryCreationFailedAlreadyExistsMessage" xml:space="preserve">
    <value>Change the repository name or select a different account and try again.</value>
  </data>
  <data name="RepositoryCreationFailedQuota" xml:space="preserve">
    <value>Exceeded private repositories quota.</value>
  </data>
  <data name="RepositoryNameValidatorAlreadyExists" xml:space="preserve">
    <value>Repository with same name already exists at this location</value>
  </data>
  <data name="RepositoryNameValidatorEmpty" xml:space="preserve">
    <value>Please enter a repository name</value>
  </data>
  <data name="RepositoryNameValidatorTooLong" xml:space="preserve">
    <value>Repository name must be fewer than 100 characters</value>
  </data>
  <data name="SafeRepositoryNameWarning" xml:space="preserve">
    <value>Will be created as {0}</value>
  </data>
  <data name="TwoFactorApp" xml:space="preserve">
    <value>Open the two-factor authentication app on your device to view your authentication code.</value>
  </data>
  <data name="TwoFactorSms" xml:space="preserve">
    <value>We sent you a message via SMS with your authentication code.</value>
  </data>
  <data name="TwoFactorTitle" xml:space="preserve">
    <value>Two-Factor authentication required</value>
  </data>
  <data name="TwoFactorUnknown" xml:space="preserve">
    <value>Enter a login authentication code here</value>
  </data>
  <data name="UsernameOrEmailValidatorEmpty" xml:space="preserve">
    <value>Please enter your username or email address</value>
  </data>
  <data name="UsernameOrEmailValidatorSpaces" xml:space="preserve">
    <value>Username or email address must not have spaces</value>
  </data>
</root>